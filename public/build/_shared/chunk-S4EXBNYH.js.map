{
  "version": 3,
  "sources": ["empty-module:~/utils/theme.server", "../../../app/hooks/use-theme.tsx"],
  "sourcesContent": ["module.exports = {};", "/* eslint-disable react/no-danger */\nimport type { FC } from 'react'\nimport { createContext, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react'\nimport { useFetcher } from 'remix'\n\nexport enum Theme {\n  DARK = 'dark',\n  LIGHT = 'light',\n}\nconst themes: Array<Theme> = Object.values(Theme)\n\nconst ThemeContext = createContext<{\n  theme: Theme | undefined\n  toggleTheme: () => void\n}>({\n  theme: Theme.LIGHT,\n  toggleTheme: () => {},\n})\nThemeContext.displayName = 'ThemeContext'\n\nconst prefersLightMQ = '(prefers-color-scheme: light)'\nexport const getPreferredTheme = () =>\n  window.matchMedia(prefersLightMQ).matches ? Theme.LIGHT : Theme.DARK\n\nexport const ThemeProvider: FC<{ specifiedTheme: Theme | null }> = ({\n  specifiedTheme,\n  children,\n}) => {\n  const [theme, setTheme] = useState<Theme | undefined>(() => {\n    if (specifiedTheme && themes.includes(specifiedTheme)) return specifiedTheme\n\n    if (typeof window !== 'object') return undefined\n\n    return getPreferredTheme()\n  })\n\n  const toggleTheme = useCallback(\n    () => (theme === Theme.DARK ? setTheme(Theme.LIGHT) : setTheme(Theme.DARK)),\n    [theme]\n  )\n\n  const persistTheme = useFetcher()\n  const persistThemeRef = useRef(persistTheme)\n\n  useEffect(() => {\n    persistThemeRef.current = persistTheme\n  }, [persistTheme])\n\n  const mountRun = useRef(false)\n\n  useEffect(() => {\n    if (!mountRun.current) {\n      mountRun.current = true\n      return\n    }\n    if (!theme) return\n\n    persistThemeRef.current.submit({ theme }, { action: 'action/toggle-theme', method: 'post' })\n  }, [theme])\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(prefersLightMQ)\n    const handleChange = () => {\n      setTheme(mediaQuery.matches ? Theme.LIGHT : Theme.DARK)\n    }\n    mediaQuery.addEventListener('change', handleChange)\n    return () => mediaQuery.removeEventListener('change', handleChange)\n  }, [])\n\n  const value = useMemo(() => ({ theme, toggleTheme }), [theme, toggleTheme])\n\n  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>\n}\n\nconst clientThemeCode = `\n// hi there dear reader \uD83D\uDC4B\n// this is how I make certain we avoid a flash of the wrong theme. If you select\n// a theme, then I'll know what you want in the future and you'll not see this\n// script anymore.\n;(() => {\n  const theme = window.matchMedia(${JSON.stringify(prefersLightMQ)}).matches\n    ? 'light'\n    : 'dark';\n\n  const cl = document.documentElement.classList;\n\n  const themeAlreadyApplied = cl.contains('light') || cl.contains('dark');\n  if (themeAlreadyApplied) {\n    // this script shouldn't exist if the theme is already applied!\n    console.warn(\n      \"Hi there, could you let Kent know you're seeing this message? Thanks!\",\n    );\n  } else {\n    cl.add(theme);\n  }\n\n  // the <dark-mode> and <light-mode> approach won't work for meta tags,\n  // so we have to do it manually.\n  const meta = document.querySelector('meta[name=color-scheme]');\n  if (meta) {\n    if (theme === 'dark') {\n      meta.content = 'dark light';\n    } else if (theme === 'light') {\n      meta.content = 'light dark';\n    }\n  } else {\n    console.warn(\n      \"Heya, could you let Kent know you're seeing this message? Thanks!\",\n    );\n  }\n})();\n`\nexport const useTheme = () => {\n  const { theme, toggleTheme } = useContext(ThemeContext)\n  return { theme, toggleTheme }\n}\n\nexport function NonFlashOfWrongThemeEls({ ssrTheme }: { ssrTheme: boolean }) {\n  const { theme } = useTheme()\n  return (\n    <>\n      {/*\n\t\t\tOn the server, \"theme\" might be `null`, so clientThemeCode ensures that\n\t\t\tthis is correct before hydration.\n\t\t */}\n      <meta name='color-scheme' content={theme === 'light' ? 'light' : 'dark'} />\n      {/* // eslint-disable-next-line react/no-danger */}\n      {ssrTheme ? undefined : <script dangerouslySetInnerHTML={{ __html: clientThemeCode }} />}\n    </>\n  )\n}\n\nexport function isTheme(value: unknown): value is Theme {\n  return typeof value === 'string' && themes.includes(value as Theme)\n}\n"],
  "mappings": ";;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,WAAO,UAAU;AAAA;AAAA;;;ACAjB;AAEA,mBAA6F;AAGtF,IAAK,QAAL,kBAAK,WAAL;AACL,mBAAO;AACP,oBAAQ;AAFE;AAAA;AAIZ,IAAM,SAAuB,OAAO,OAAO;AAE3C,IAAM,eAAe,gCAGlB;AAAA,EACD,OAAO;AAAA,EACP,aAAa,MAAM;AAAA;AAAA;AAErB,aAAa,cAAc;AAE3B,IAAM,iBAAiB;AAChB,IAAM,oBAAoB,MAC/B,OAAO,WAAW,gBAAgB,UAAU,sBAAc;AAErD,IAAM,gBAAsD,CAAC;AAAA,EAClE;AAAA,EACA;AAAA,MACI;AACJ,QAAM,CAAC,OAAO,YAAY,2BAA4B,MAAM;AAC1D,QAAI,kBAAkB,OAAO,SAAS;AAAiB,aAAO;AAE9D,QAAI,OAAO,WAAW;AAAU,aAAO;AAEvC,WAAO;AAAA;AAGT,QAAM,cAAc,8BAClB,MAAO,UAAU,oBAAa,SAAS,uBAAe,SAAS,oBAC/D,CAAC;AAGH,QAAM,eAAe;AACrB,QAAM,kBAAkB,yBAAO;AAE/B,8BAAU,MAAM;AACd,oBAAgB,UAAU;AAAA,KACzB,CAAC;AAEJ,QAAM,WAAW,yBAAO;AAExB,8BAAU,MAAM;AACd,QAAI,CAAC,SAAS,SAAS;AACrB,eAAS,UAAU;AACnB;AAAA;AAEF,QAAI,CAAC;AAAO;AAEZ,oBAAgB,QAAQ,OAAO,EAAE,SAAS,EAAE,QAAQ,uBAAuB,QAAQ;AAAA,KAClF,CAAC;AAEJ,8BAAU,MAAM;AACd,UAAM,aAAa,OAAO,WAAW;AACrC,UAAM,eAAe,MAAM;AACzB,eAAS,WAAW,UAAU,sBAAc;AAAA;AAE9C,eAAW,iBAAiB,UAAU;AACtC,WAAO,MAAM,WAAW,oBAAoB,UAAU;AAAA,KACrD;AAEH,QAAM,QAAQ,0BAAQ,MAAO,GAAE,OAAO,gBAAgB,CAAC,OAAO;AAE9D,SAAO,oCAAC,aAAa,UAAd;AAAA,IAAuB;AAAA,KAAe;AAAA;AAG/C,IAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAMY,KAAK,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgC5C,IAAM,WAAW,MAAM;AAC5B,QAAM,EAAE,OAAO,gBAAgB,6BAAW;AAC1C,SAAO,EAAE,OAAO;AAAA;AAGX,iCAAiC,EAAE,YAAmC;AAC3E,QAAM,EAAE,UAAU;AAClB,SACE,0DAKE,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,IAAe,SAAS,UAAU,UAAU,UAAU;AAAA,MAEhE,WAAW,SAAY,oCAAC,UAAD;AAAA,IAAQ,yBAAyB,EAAE,QAAQ;AAAA;AAAA;",
  "names": []
}
