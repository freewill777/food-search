{
  "version": 3,
  "sources": ["../../../app/components/animated-text/animated-text.tsx", "../../../app/components/animated-text/index.ts", "../../../app/components/animated-text/animated-text.motion.ts"],
  "sourcesContent": ["/* eslint-disable react/no-array-index-key */\nimport type { ComponentPropsWithoutRef, ElementType } from 'react'\nimport { useMemo } from 'react'\n\nimport type { Variants } from 'framer-motion'\nimport { motion } from 'framer-motion'\n\nimport { defaultLetterVariants, defaultTextVariants } from '~/components/animated-text'\n\ntype AnimatedTextOwnProps<C extends ElementType> = {\n  as?: C | ElementType\n  text: string\n  variants?: Variants\n}\n\ntype AnimatedTextProps<C extends ElementType> = AnimatedTextOwnProps<C> &\n  Omit<ComponentPropsWithoutRef<C>, keyof AnimatedTextOwnProps<C>>\n\nexport const AnimatedText = <C extends ElementType = 'p'>({\n  as: Tag = 'p',\n  text,\n  variants = defaultLetterVariants,\n  ...rest\n}: AnimatedTextProps<C>) => {\n  // Split the text into words and add a space after each word.\n  const words = text.split(' ').map(word => `${word}\\u00A0`)\n\n  const renderWords = useMemo(\n    () =>\n      words.map((word, index) => (\n        <span key={index} className='inline-block overflow-hidden'>\n          <motion.span variants={variants} className='inline-block'>\n            {word}\n          </motion.span>\n        </span>\n      )),\n    [variants, words]\n  )\n\n  return (\n    <Tag {...rest}>\n      <motion.span variants={variants}>{renderWords}</motion.span>\n    </Tag>\n  )\n}\n\nexport type AnimatedLettersOwnProps<C extends ElementType> = {\n  as?: C | ElementType\n  text: string\n  textVariants?: Variants\n  letterVariants?: Variants\n}\n\ntype AnimatedLettersProps<C extends ElementType> = AnimatedLettersOwnProps<C> &\n  Omit<ComponentPropsWithoutRef<C>, keyof AnimatedLettersOwnProps<C>>\n\nexport const AnimatedLetters = <C extends ElementType = 'div'>({\n  as: Tag = 'div',\n  text,\n  textVariants = defaultTextVariants,\n  letterVariants = defaultLetterVariants,\n  ...rest\n}: AnimatedLettersProps<C>) => {\n  // Split the text into words and add a space after each word.\n  const words = text.split(' ').map(word => `${word}\\u00A0`)\n  return (\n    <Tag {...rest}>\n      <motion.span variants={textVariants}>\n        {words.map((_, index) => (\n          <span key={index} className='inline-block whitespace-nowrap' style={{ marginTop: '0.35em' }}>\n            {[...words[index]].flat().map((letter, letterIndex) => (\n              <span key={letterIndex} className='inline-block overflow-hidden'>\n                <motion.span variants={letterVariants} className='inline-block'>\n                  {letter}\n                </motion.span>\n              </span>\n            ))}\n          </span>\n        ))}\n      </motion.span>\n    </Tag>\n  )\n}\n", "export * from './animated-text'\nexport * from './animated-text.motion'\n", "import type { Variants } from 'framer-motion'\n\nexport const defaultTextVariants: Variants = {\n  visible: {},\n}\n\nexport const defaultLetterVariants: Variants = {\n  hidden: { opacity: 0, y: 50 },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: { ease: 'circOut', duration: 0.5 },\n  },\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA;AAEA,mBAAwB;;;ACFxB;;;ACAA;AAEO,IAAM,sBAAgC;AAAA,EAC3C,SAAS;AAAA;AAGJ,IAAM,wBAAkC;AAAA,EAC7C,QAAQ,EAAE,SAAS,GAAG,GAAG;AAAA,EACzB,SAAS;AAAA,IACP,SAAS;AAAA,IACT,GAAG;AAAA,IACH,YAAY,EAAE,MAAM,WAAW,UAAU;AAAA;AAAA;;;AFOtC,IAAM,eAAe,CAA8B;AAAA,EACxD,IAAI,MAAM;AAAA,EACV;AAAA,EACA,WAAW;AAAA,KACR;AAAA,MACuB;AAE1B,QAAM,QAAQ,KAAK,MAAM,KAAK,IAAI,UAAQ,GAAG;AAE7C,QAAM,cAAc,0BAClB,MACE,MAAM,IAAI,CAAC,MAAM,UACf,oCAAC,QAAD;AAAA,IAAM,KAAK;AAAA,IAAO,WAAU;AAAA,KAC1B,oCAAC,OAAO,MAAR;AAAA,IAAa;AAAA,IAAoB,WAAU;AAAA,KACxC,SAIT,CAAC,UAAU;AAGb,SACE,oCAAC,KAAD;AAAA,OAAS;AAAA,KACP,oCAAC,OAAO,MAAR;AAAA,IAAa;AAAA,KAAqB;AAAA;AAejC,IAAM,kBAAkB,CAAgC;AAAA,EAC7D,IAAI,MAAM;AAAA,EACV;AAAA,EACA,eAAe;AAAA,EACf,iBAAiB;AAAA,KACd;AAAA,MAC0B;AAE7B,QAAM,QAAQ,KAAK,MAAM,KAAK,IAAI,UAAQ,GAAG;AAC7C,SACE,oCAAC,KAAD;AAAA,OAAS;AAAA,KACP,oCAAC,OAAO,MAAR;AAAA,IAAa,UAAU;AAAA,KACpB,MAAM,IAAI,CAAC,GAAG,UACb,oCAAC,QAAD;AAAA,IAAM,KAAK;AAAA,IAAO,WAAU;AAAA,IAAiC,OAAO,EAAE,WAAW;AAAA,KAC9E,CAAC,GAAG,MAAM,QAAQ,OAAO,IAAI,CAAC,QAAQ,gBACrC,oCAAC,QAAD;AAAA,IAAM,KAAK;AAAA,IAAa,WAAU;AAAA,KAChC,oCAAC,OAAO,MAAR;AAAA,IAAa,UAAU;AAAA,IAAgB,WAAU;AAAA,KAC9C;AAAA;",
  "names": []
}
